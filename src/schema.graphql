type User {
  _id: ID!
  username: String!
  email: String!
  pwd: String
  createdEvents: [Event!]
}

type Event {
  _id: ID!
  name: String!
  desc: String!
  price: Int!
  date: String!
  createdBy: User!
  attendees: [String]
}

input UserInput {
  username: String!
  email: String!
  pwd: String!
}

input EventInput {
  name: String!
  desc: String!
  price: Int!
  date: String!
  userId: String!
}

type RootQuery {
  getUser(email: String!): User!
  getEvents: [Event!]!
}

type RootMutation {
  createUser(userInput: UserInput): User
  createEvent(eventInput: EventInput): Event
  bookEvent(userId: String, eventId: String): Event
  cancelBooking(userId: String, eventId: String): Event
}

schema {
  query: RootQuery
  mutation: RootMutation
}
